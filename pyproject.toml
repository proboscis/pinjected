[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pinjected"
version = "0.2.252-beta"
description = "Immutable Dependency Injection for Python."
authors = [
    { name = "proboscis", email = "nameissoap@gmail.com" }
]
license = { text = "MIT" }
requires-python = ">=3.10"
dependencies = [
    "returns",
    "expression",
    "cloudpickle",
    "tabulate",
    "cytoolz",
    "frozendict",
    "fire",
    "pyyaml",
    "pyvis",
    "makefun",
    "loguru",
    "rich",
    "pydantic",
    "pytest",
    "beartype",
    "pytest-asyncio",
    "pytest-xdist",
    "tqdm",
]

[project.optional-dependencies]
dev = [
    "pytest",
    "tqdm>=4.66.5",
    "click>=8.1.7",
    "wandb>=0.17.8",
    "pytest-xdist>=3.6.1",
]

[project.scripts]
pinjected = "pinjected.main_impl:main"

[tool.pytest.ini_options]
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"
pythonpath = [
    "packages/anthropic/src",
    "packages/wandb_util/src",
    "packages/error_reports/src",
    "packages/reviewer/src",
    "packages/rate_limit/src",
    "packages/niji_voice/src",
    "packages/injected_utils/src"
]

[tool.uv.workspace]
members = ["packages/*"]

[dependency-groups]
dev = [
    "pinjected-reviewer",
    "pinjected-error-reports",
    "ruff>=0.11.7",
    "flake8>=7.0.0",
    "flake8-cognitive-complexity>=0.1.0",
    "flake8-pyproject>=1.2.3",
    "pre-commit>=4.2.0",
]

[tool.uv.sources]
pinjected-anthropic = { workspace = true }
pinjected-wandb = { workspace = true }
pinjected-error-reports = { workspace = true }
pinjected-reviewer = { workspace = true }
pinjected-rate-limit = { workspace = true }
pinjected-niji-voice = { workspace = true }
injected-utils = { workspace = true }
pinjected-openai = { workspace = true }
[tool.ruff]
target-version = "py310"
line-length = 88
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "remote_packages/",
]

lint.select = [
    "E", # pyflakes/flake8 errors
    "F", # pyflakes errors
    "W", # pyflakes warnings
    "C901", # McCabe complexity errors
    "PLR", # pylint‐style design checks
    "RUF", # Ruff‐specific rules
    "SIM", # Code similarity checks
]
lint.ignore = [
    #"F401", # unused import
    "F403", # star import used
    "F405", # name may be undefined, or defined from star import
    "F407", # undefined forward reference
    "F811", # redefinition of unused name
    "F541", # f-string missing placeholders
    "E261", # at least two spaces before inline comment
    "E262", # inline comment should start with '# '
    "E265", # block comment should start with '# '
    "E266", # too many leading '#' for block comment
    "F722", # unexpected token at end of expression
    "E501", # line too long
    "W291", # trailing whitespace
    "W293", # blank line contains whitespace
    "PLR2004", # magic number
    "PLR0913", # Too many arguments in function definition: I want this but not working for @injected functions...
    "RUF005", # collection concatenation (not correct for pinjected)
    "SIM108", # tenary if-else. but makes it hard to read.
    "RUF003", # commenting for full-character parenthesis
    "RUF002", # commenting for full-character brackets
    "RUF001", # Full character comment
    #
    "COM812", # trailing comma
    "S101", # use of assert
    # T201 needs to be resolved with loguru.logger at least.
    "ERA001", # Commented out code
    "C408", # dict() to {}
    "TD002", # Missing TODO author
    "RET504", # unnecessary asignment before return
    "D100", # Missing docstring in public module
    "D101", # missing doc in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public method,
    "D200", # multiline doc stuff
    "D104", # Missing doc
    "D415", # Doc
    "D105", # Missing doc
    "D400", # doc
    "D205", # require blank line
    "ANN001", # type annotation for func argument
    "EM102", # f-string in exception
    "N806", # enforce lower case for variable
    "TRY003", # exception with dynamic message
    "G004", # fstring in logger
    "D", # all doc?
    "Q000", # prefer double quotes?
    "TRY400",
    "TRY300",
    "TRY301"
]


# Cyclomatic complexity → C901
[tool.ruff.lint.mccabe]
# Flag C901 errors whenever a function's cyclomatic complexity exceeds 6
max-complexity = 6
[tool.ruff.lint.pylint]
# 1. Too many arguments → R0913
max-args = 5
# 2. Too many local variables → R0914
max-locals = 5
# 3. Too many branches → R0912
max-branches = 6
# 4. Too many statements → R0915
max-statements = 40
# 5. Too many nested blocks → R0916
max-nested-blocks = 2

[tool.pyright]
typeCheckingMode = "off"


[tool.flake8]
max-cognitive-complexity = 15
select = ["CCR"]  # Only check cognitive complexity
#ignore = ["E", "F", "W"]  # Ignore all other error codes
ignore = ['ALL']
# Paths and patterns to ignore when running `flake8`
exclude = [
    ".venv",
    "__pycache__",
    ".git",
    ".tox",
    ".nox",
    ".eggs",
    "*.egg",
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["ANN201"]
"packages/*/tests/**/*.py" = ["ANN201"]
