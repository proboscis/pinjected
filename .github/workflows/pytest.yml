name: Python Tests

on:
  push:
    branches: [ main, feature/design-spec ]
  pull_request:
    branches: [ main, feature/design-spec ]

permissions:
  contents: read
  packages: read
  actions: read
  pull-requests: write
  repository-projects: read
  security-events: write

jobs:
  test:
    runs-on: ubuntu-latest
    name: pytest (${{ matrix.python-version }}, ${{ matrix.package }})
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']
        package: ['core', 'openai_support', 'anthropic', 'wandb_util', 'error_reports', 'reviewer', 'rate_limit', 'niji_voice', 'injected_utils', 'gcp']

    steps:
    - uses: actions/checkout@v4
        
    - name: Install system dependencies
      run: |
        sudo apt update
        sudo apt install -y pkg-config libssl-dev
        
    - name: Remove uv.lock
      run: rm -f uv.lock
        
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        uv --version
        
    - name: Cache uv environments
      uses: actions/cache@v4
      with:
        path: |
          .venv
          packages/${{ matrix.package }}/.venv
        key: ${{ runner.os }}-uv-${{ matrix.python-version }}-${{ matrix.package }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles(format('packages/{0}/pyproject.toml', matrix.package)) }}
        restore-keys: |
          ${{ runner.os }}-uv-
          
    - name: Install dependencies (per package)
      run: |
        if [ "${{ matrix.package }}" = "core" ]; then
          rm -f uv.lock
          make sync
        else
          rm -f uv.lock
          cd packages/${{ matrix.package }}
          uv venv
          uv sync --group dev
        fi
        
    - name: Run tests per package
      run: |
        if [ "${{ matrix.package }}" = "core" ]; then
          make test-core
        else
          cd packages/${{ matrix.package }}
          uv run pytest -q
        fi

  linter-rust:
    runs-on: ubuntu-latest
    name: cargo test (pinjected-linter)
    steps:
    - uses: actions/checkout@v4

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Run cargo tests for pinjected-linter
      working-directory: packages/pinjected-linter/rust-poc
      run: cargo test
