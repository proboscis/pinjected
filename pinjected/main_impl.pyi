from typing import Any
from pinjected import Design

def run(
    var_path: str | None = ...,
    design_path: str | None = ...,
    overrides: str | None = ...,
    meta_context_path: str | None = ...,
    base64_encoded_json: str | None = ...,
    **kwargs,
) -> Any: ...
def check_config() -> Any: ...
def parse_kwargs_as_design(**kwargs) -> Any: ...
def parse_overrides(overrides) -> Design: ...
def decode_b64json(text) -> Any: ...
def call(function_path: str, iproxy_path: str) -> Any: ...
def json_graph(
    var_path: str | None = ..., design_path: str | None = ..., **kwargs
) -> Any: ...
def describe(
    var_path: str | None = ..., design_path: str | None = ..., **kwargs
) -> Any: ...
def describe_json(
    var_path: str | None = ..., design_path: str | None = ..., **kwargs
) -> Any: ...
def list(var_path: str | None = ...) -> Any: ...
async def a_trace_key(key_name: str, var_path: str | None = ...) -> Any: ...
async def _a_resolve_design(var_spec) -> Any: ...
def trace_key(key_name: str, var_path: str | None = ...) -> Any: ...
def _print_trace_key_error() -> Any: ...
def _handle_trace_results(key_name: str, key_traces: list, found: bool) -> int: ...
def review_pinjected(fix: bool = ...) -> Any: ...
def main() -> Any: ...

class PinjectedRunDependencyResolutionFailure: ...

class PinjectedCLI:
    def __init__(self) -> Any: ...
