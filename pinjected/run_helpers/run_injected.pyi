from typing import Any
from pinjected.di.design import Design
from pinjected.di.injected import Injected
from pinjected.module_path import ModuleVarSpec
from pinjected.helper_structure import MetaContext
from pinjected.di.iresolver import IResolverCallback

_enter_count: Any

def run_injected(cmd, var_path, design_path: str = ..., *args, **kwargs) -> Any: ...
async def a_run_target(var_path: str, design_path: str | None = ...) -> Any: ...
def _remote_test(var_path: str) -> Any: ...
async def a_run_target__mp(var_path: str) -> Any: ...
def run_anything(
    cmd: str,
    var_path: str,
    design_path: str | None,
    overrides=...,
    return_result=...,
    notify=...,
) -> Any: ...
def generate_dependency_graph_description(
    var_path, design_path, cxt, design
) -> Any: ...
def generate_dependency_chain_json(var_path, design_path, cxt, design) -> Any: ...
def call_impl(call_args, call_kwargs, cxt, design) -> Any: ...
async def a_run_with_notify(cxt: RunContext, a_run, notify=...) -> Any: ...
async def a_resolve_design(design_path, meta_cxt: MetaContext) -> Design: ...
async def a_get_run_context(design_path, var_path) -> RunContext: ...
async def a_resolve_design(design_path, meta_cxt) -> Any: ...
def find_dot_pinjected() -> Any: ...
def load_design_from_paths(paths, design_name) -> Any: ...
def load_user_default_design() -> Design: ...
def _load_design(design_path) -> Any: ...
def load_user_overrides_design() -> Any: ...

class PinjectedConfigurationLoadFailure: ...
class PinjectedRunFailure: ...

class RunContext:
    src_meta_context: MetaContext
    design: Design
    meta_overrides: Design
    var: Injected
    src_var_spec: ModuleVarSpec
    provision_callback: IResolverCallback | None
    overrides: Design
    def add_design(self, design: Design) -> Any: ...
    def add_overrides(self, overrides: Design) -> Any: ...
    def get_final_design(self) -> Any: ...
    async def a_provide(self, tgt, show_debug=...) -> Any: ...
    async def _a_run(self) -> Any: ...
    async def a_run(self) -> Any: ...
    async def a_run_with_clean_stacktrace(self) -> Any: ...
    def run(self) -> Any: ...
