[project]
name = "pinjected-linter"
version = "0.1.0"
description = "Linter for Pinjected dependency injection library"
authors = [{name = "Kento Masui", email = "nameissoap@gmail.com"}]
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
]

dependencies = [
    "click>=8.0",
    "rich>=10.0",
    "pydantic>=1.8",
    "tomli>=1.2.0; python_version < '3.11'",
    "loguru>=0.5.0",
]

[dependency-groups]
dev = [
    "pytest>=7.0",
    "pytest-cov>=3.0",
    "black>=22.0",
    "ruff>=0.0.261",
]

[project.scripts]
pinjected-lint = "pinjected_linter.cli:main"

[project.urls]
"Homepage" = "https://github.com/pinjected/pinjected"
"Bug Tracker" = "https://github.com/pinjected/pinjected/issues"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]
include = ["pinjected_linter*"]

[tool.setuptools.package-data]
pinjected_linter = ["py.typed"]

[tool.ruff]
line-length = 120
target-version = "py38"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle
    "F",  # pyflakes
    "I",  # isort
    "N",  # pep8-naming
    "UP", # pyupgrade
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "SIM", # flake8-simplify
]
ignore = ["N802"]  # Allow uppercase function names for AST visitor methods

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["src"]

[tool.coverage.run]
source = ["pinjected_linter"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]